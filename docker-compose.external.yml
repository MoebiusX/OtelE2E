version: '3.8'

services:
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net

  kong-migrations:
    image: kong/kong-gateway:latest
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    networks:
      - kong-net
    restart: on-failure

  kong-gateway:
    image: kong/kong-gateway:latest
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      # OpenTelemetry configuration
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: 1.0
    ports:
      - "8000:8000"   # Kong Gateway proxy
      - "8443:8443"   # Kong Gateway proxy SSL
      - "8001:8001"   # Kong Admin API
      - "8444:8444"   # Kong Admin API SSL
      - "8002:8002"   # Kong Manager (GUI)
      - "8445:8445"   # Kong Manager SSL
      - "8003:8003"   # Kong Dev Portal
      - "8446:8446"   # Kong Dev Portal SSL
    networks:
      - kong-net
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - kong-net
    restart: unless-stopped

  # Grafana Tempo for trace storage
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo HTTP API
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    networks:
      - kong-net
    restart: unless-stopped

  # Jaeger UI for trace visualization (reads from Tempo)
  jaeger:
    image: jaegertracing/jaeger-query:latest
    environment:
      SPAN_STORAGE_TYPE: grpc-plugin
      GRPC_STORAGE_PLUGIN_BINARY: /go/bin/jaeger-tempo
      GRPC_STORAGE_PLUGIN_CONFIGURATION_FILE: /etc/jaeger/config.yaml
    volumes:
      - ./jaeger-tempo-config.yaml:/etc/jaeger/config.yaml
    ports:
      - "16686:16686" # Jaeger UI
    depends_on:
      - tempo
    networks:
      - kong-net
    restart: unless-stopped

  # Grafana for dashboards and observability
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - tempo
    networks:
      - kong-net
    restart: unless-stopped

volumes:
  kong_data:
  rabbitmq_data:
  tempo_data:
  grafana_data:

networks:
  kong-net:
    driver: bridge